// <auto-generated />
using System;
using EvaluationServices.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EvaluationServices.DataLayer.Migrations
{
    [DbContext(typeof(EvaluationContext))]
    [Migration("20200109111927_V4")]
    partial class V4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.FormQuestionEF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormQuestion");
                });

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.FormResponseEF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendeeID")
                        .HasColumnType("int");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormResponse");
                });

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.QuestionEF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("FormQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("NameDutch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFrench")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.QuestionPropositionEF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameDutch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFrench")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionProposition");
                });

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.ResponseEF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ResponseFormId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseOpened")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.ResponsePropositionEF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionPropositionId")
                        .HasColumnType("int");

                    b.Property<int>("ResponseId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPropositionId");

                    b.HasIndex("ResponsesId");

                    b.ToTable("Response");
                });

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.QuestionEF", b =>
                {
                    b.HasOne("EvaluationServices.DataLayer.Entities.FormQuestionEF", "Form")
                        .WithMany("Questions")
                        .HasForeignKey("FormId");
                });

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.QuestionPropositionEF", b =>
                {
                    b.HasOne("EvaluationServices.DataLayer.Entities.QuestionEF", "QuestionProposition")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.ResponseEF", b =>
                {
                    b.HasOne("EvaluationServices.DataLayer.Entities.FormResponseEF", "Form")
                        .WithMany("Responses")
                        .HasForeignKey("FormId");

                    b.HasOne("EvaluationServices.DataLayer.Entities.QuestionEF", "QuestionProposition")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EvaluationServices.DataLayer.Entities.ResponsePropositionEF", b =>
                {
                    b.HasOne("EvaluationServices.DataLayer.Entities.QuestionPropositionEF", "QuestionProposition")
                        .WithMany()
                        .HasForeignKey("QuestionPropositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationServices.DataLayer.Entities.ResponseEF", "Responses")
                        .WithMany("Choices")
                        .HasForeignKey("ResponsesId");
                });
#pragma warning restore 612, 618
        }
    }
}
